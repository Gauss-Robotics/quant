from __future__ import annotations
import quantpy.quantpy.units
import typing
__all__ = ['Angle', 'AngularDifference']
class Angle:
    __hash__: typing.ClassVar[None] = None
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    @staticmethod
    def degrees(arg0: float) -> Angle:
        ...
    @staticmethod
    def radians(arg0: float) -> Angle:
        ...
    def __add__(self, arg0: Angle) -> Angle:
        ...
    def __eq__(self, arg0: Angle) -> bool:
        ...
    def __float__(self) -> float:
        ...
    def __mul__(self, arg0: int) -> Angle:
        ...
    def __ne__(self, arg0: Angle) -> bool:
        ...
    def __neg__(self) -> Angle:
        ...
    def __repr__(self) -> str:
        ...
    def __str__(self) -> str:
        ...
    def __truediv__(self, arg0: int) -> Angle:
        ...
    def to_degrees(self) -> quantpy.quantpy.units.Scalar:
        ...
    def to_radians(self) -> quantpy.quantpy.units.Scalar:
        ...
class AngularDifference(_base_AngularDifference):
    __hash__: typing.ClassVar[None] = None
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    @staticmethod
    def radians(arg0: float) -> AngularDifference:
        ...
    @staticmethod
    def zero() -> AngularDifference:
        ...
    def __add__(self, arg0: AngularDifference) -> AngularDifference:
        ...
    def __eq__(self, arg0: AngularDifference) -> bool:
        ...
    def __float__(self) -> float:
        ...
    def __mul__(self, arg0: int) -> AngularDifference:
        ...
    def __ne__(self, arg0: AngularDifference) -> bool:
        ...
    def __neg__(self) -> AngularDifference:
        ...
    def __repr__(self) -> str:
        ...
    def __str__(self) -> str:
        ...
    def __truediv__(self, arg0: int) -> AngularDifference:
        ...
    def to_radians(self) -> quantpy.quantpy.units.Scalar:
        ...
class _base_AngularDifference:
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
